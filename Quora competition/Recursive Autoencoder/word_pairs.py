#!/usr/bin/env python2
# -*- coding: utf-8 -*-

import numpy as np

"""
Created on Sun May  7 11:58:53 2017
@author: ignacio
"""
""" previous pairs: numpy array whose rows are the concatenation of words
from the previous step. 

previous_words: a list of lists (or numpy arrays). Each inside list contains
the vector representation of words in a sentence in its proper order. Since
at each step a pair of words is merged into a new word, this is taken into 
account in our definition of this list of lists: at each step the sentence
gets a new word generated by two previous words.

n_words: a numpy array. amount_of_words[i] = len(previous_words[i])


"""

def word_pairs(encoder,decoder,previous_pairs,previous_words,n_words,word_size):
    n_sentences = len(previous_words)
    activation = encoder.fit(previous_words)
    scores = decoder.evaluate(activation)
    
    next_pairs = np.zeros((n_sentences,2*word_size))
    next_words = []
    new_n_words =  np.zeros((n_sentences,1))
    
    """ we get the best scoring pair for each sentence"""
    cp = 0 #cumulated number of pairs up to the actual sentence
    ncp = 0 #cumulated number of pairs added to next_pairs up to the actual sentence
    added = 0
    for i in range(n_sentences):
        s_words = n_words[i]
        sentence_scores = scores[cp:cp+s_words]
        min_index = np.argmin(sentence_scores)
        
        """ we select the new word using the min index and create the new
        array for the sentence only if it has more than 2 words"""
        new_word = activation[cp+min_index]
        new_sentence = np.zeros((s_words-1,word_size))
        prev_sentence = previous_words[i]
        new_sentence[0:min_index,:] = prev_sentence[0:min_index,:]
        new_sentence[min_index] = new_word
        new_sentence[min_index+1:,:] = prev_sentence[min_index+2:,:]
        
        """ we create the new pairs regarding the sentence if we have more
        than 2 words in the sentence"""
        if (s_words) > 1:
            next_words.append(new_sentence)
            """
            if min_index > 0:
                next_pairs[ncp:ncp+(min_index-1),:] = previous_pairs[cp:cp+(min_index-1),:]
                 first pair 
                next_pairs[ncp+min_index-1,0:word_size] = new_sentence[min_index-1,:]                      
                next_pairs[ncp+min_index-1,word_size:] = new_word
                 second pair 
                next_pairs[ncp+min_index,0:word_size] = new_word
                next_pairs[ncp+min_index,word_size:] = new_sentence[min_index+1,:] 
                
                next_pairs[ncp+min_index+1:,:] = previous_pairs[cp+min_index+2:,:]
            """
            for i in range(s_words-1):
                next_pairs[ncp+i,0:word_size] = new_sentence[i]
                next_pairs[ncp+i,word_size:] = new_sentence[i+1]
            ncp += s_words-2
            new_n_words[added] = s_words-1
            added +=1
        cp += s_words-1 

